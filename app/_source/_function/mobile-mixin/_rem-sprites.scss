// 使用说明：此文档基于_rem-calc.scss,在引入此文档之前引入_rem-calc.scss，也可以将_rem-calc.scss引到此文档
// ＝＝一.mixin ＊＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// 1._rem-sprites($map[,$dimensions,$active:true])
//    生成所有文件样式
//    $map为必填参数,值为sprite-map()得到的变量
//    $dimensions为可选参数，参数为布尔值。值为true表示输出宽和高，值为false时，不输出宽和高
//    $active为判断是否需要点击伪类
// 2._rem-sprite($map,$name[,$dimensions])
//    生成指定文件样式，必须放在元素内部
//    $map为必填参数,值为sprite-map()得到的变量
//    $name为必填参数，值为图片的名称
//    $dimensions为可选参数，参数为布尔值。值为true表示输出宽和高，值为false时，不输出宽和高
// ＝＝二.function＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// 1.calc-width($map[,$item])
//    计算元算的rem单位的宽度，第一个参数为必填参数，值为sprite-map()得到的变量，第二个参数为可选参数，值为$map的字元素名称
// 2.calc-height($map[,$item])
//    计算元算的rem单位的高度，第一个参数为必填参数，值为sprite-map()得到的变量，第二个参数为可选参数，值为$map的字元素名称
@import "compass";
// 以rem为单位计算宽度
@function calc-width($map, $item:null, $rem-base: $rem-base) {
    @if $item {
        @return rem-calc(sprite-width($map, $item), $rem-base);
    }
    @else {
        @return rem-calc(sprite-width($map), $rem-base);
    }
}

// 以rem为单位计算高度
@function calc-height($map, $item:null, $rem-base: $rem-base) {
    @if $item {
        @return rem-calc(sprite-height($map, $item), $rem-base);
    }
    @else {
        @return rem-calc(sprite-height($map), $rem-base);
    }
}

$sprites:() !default;
$lists:() !default;
@mixin _rem-sprite($map, $name, $dimensions:true, $active:false, $rem-base:$rem-base) {
    $dir-name: sprite-map-name($map);
    $my-args: ($dir-name);
    $names: sprite-names($map);
    @if index($sprites, $my-args)==null {
        $sprites: append($sprites, $my-args) !global;
        @debug sprite-url($map);
        @at-root {
            @each $name in $names {
                $iconPosXInSprite: nth(sprite-position($map, $name), 1);
                $iconPosYInSprite: nth(sprite-position($map, $name), 2);
                @if $iconPosXInSprite !=0 {
                    $iconPosXInSprite: $iconPosXInSprite / (sprite-width($map, $name) - sprite-width($map)) * 100%;
                }
                @if $iconPosYInSprite !=0 {
                    $iconPosYInSprite: $iconPosYInSprite / (sprite-height($map, $name) - sprite-height($map)) * 100%;
                }
                $lists: map-merge($lists, (#{$my-args}-size: calc-width($map) calc-height($map))) !global;
                $lists: map-merge($lists, (#{$my-args+"-"+$name}: ( name: $name, width: calc-width($map, $name, $rem-base), height: calc-height($map, $name, $rem-base), position: $iconPosXInSprite $iconPosYInSprite))) !global;
            }
            %#{$my-args} {
                background: $map;
                background-size: map-get($lists, #{$my-args}-size);
                background-repeat: no-repeat;
            }
            @if $active {
                @each $name in $names {
                    $_activename: #{$my-args+"-"+$name}-active;
                    @if map-has-key($lists, $_activename) {
                        $id-active: map-get($lists, $_activename);
                        %#{$my-args+"-"+map-get($id-active,name)} {
                            @if $dimensions {
                                & {
                                    width: map-get($id-active, width);
                                    height: map-get($id-active, height);
                                    background-position: map-get($id-active, position);
                                }
                            }
                            @else {
                                & {
                                    background-position: map-get($id-active, position);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    & {
        @extend %#{$my-args};
    }
    $id:map-get($lists, #{$my-args+"-"+$name});
    $_activename: #{$my-args+"-"+$name}-active;
    $id-active:map-get($lists, $_activename);
    @if map-has-key($lists, $_activename) {
        &:active {
            @extend %#{$my-args};
            @extend %#{$my-args+"-"+map-get($id-active,name)};
        }
    }
    @if $dimensions {
        & {
            width: map-get($id, width);
            height: map-get($id, height);
            background-position: map-get($id, position);
        }
    }
    @else {
        & {
            background-position: map-get($id, position);
        }
    }
}

@mixin _rem-sprites($map, $dimensions:true, $active:true, $pre-name:null, $separator:$default-sprite-separator, $rem-base:$rem-base) {
    $names: sprite-names($map);
    $dir-name: $pre-name or sprite-map-name($map);
    @each $name in $names {
        .#{$dir-name + $separator + $name} {
            @include _rem-sprite($map, $name, $dimensions, $active, $rem-base);
        }
    }
}

// 单次使用
@mixin rem-sprite($dir-name:null, $name:null, $dimensions:true, $active:true, $pre-name:null, $separator:$default-sprite-separator, $rem-base:$rem-base, $spacing: 0px) {
    $map: null;
    @if $dir-name !=null and type-of($dir-name)==string {
        $map: sprite-map($dir-name, $spacing: $spacing);
        @if $name !=null {
            @include _rem-sprite($map, $name, $dimensions, $active, $rem-base)
        }
        @else {
            @warn "==== 第二个参数必填，请输入具体的图片名称！====";
        }
    }
    @else {
        @warn "==== 请引入要合成的图片！====";
    }
}

// 一次应用多个
@mixin rem-sprites($dir-name:null, $dimensions:true, $active:true, $pre-name:null, $separator:$default-sprite-separator, $rem-base:$rem-base, $spacing: 0px) {
    $map: null;
    @if $dir-name !=null and type-of($dir-name)==string {
        $map: sprite-map($dir-name, $spacing: $spacing);
        @include _rem-sprites($map, $dimensions, $active, $pre-name, $separator, $rem-base);
    }
    @else {
        @warn "==== 请引入要合成的图片！====";
    }
}
